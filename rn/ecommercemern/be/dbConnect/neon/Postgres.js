const { Pool } = require("pg");

const dotenv = require("dotenv");
dotenv.config({ path: ".env.local", override: true }); // N·∫øu b·∫°n d√πng .env (t√πy ch·ªçn)

// Ki·ªÉm tra DATABASE_URL_NEON c√≥ t·ªìn t·∫°i kh√¥ng
if (!process.env.DATABASE_URL_NEON) {
    console.error("‚ùå Missing DATABASE_URL_NEON in environment variables");
    process.exit(1);
}

// C·∫•u h√¨nh SSL: ch·ªâ b·∫≠t n·∫øu c·∫ßn (Neon, Heroku, v.v.)
const sslConfig =
    process.env.NODE_ENV === "production"
        ? {
              rejectUnauthorized: false, // Neon, Heroku y√™u c·∫ßu ƒëi·ªÅu n√†y
          }
        : false; // Local kh√¥ng c·∫ßn SSL

const pool = new Pool({
    connectionString: process.env.DATABASE_URL_NEON,
    ssl: sslConfig,
    // C·∫•u h√¨nh pool
    max: parseInt(process.env.DB_MAX_CONNECTIONS) || 20, // T·ªëi ƒëa 20 k·∫øt n·ªëi
    min: parseInt(process.env.DB_MIN_CONNECTIONS) || 2, // Gi·ªØ t·ªëi thi·ªÉu 2
    idleTimeoutMillis: parseInt(process.env.DB_IDLE_TIMEOUT) || 30_000, // 30s
    connectionTimeoutMillis: parseInt(process.env.DB_CONN_TIMEOUT) || 5_000, // 5s
});

// Optional: Log khi k·∫øt n·ªëi th√†nh c√¥ng
pool.on("connect", (client) => {
    // console.log("‚úÖ New client connected to database");
});

// B·∫Øt l·ªói nghi√™m tr·ªçng tr√™n k·∫øt n·ªëi idle
pool.on("error", (err, client) => {
    console.error("üö® Unexpected error on idle client:", err);
    // Kh√¥ng n√™n exit ngay trong production, c√≥ th·ªÉ th·ª≠ recover
    // process.exit(-1); // B·ªè d√≤ng n√†y n·∫øu b·∫°n d√πng PM2 ho·∫∑c container (restart t·ª± ƒë·ªông)
});

// Export: ch·ªâ export query l√† ƒë·ªß cho ph·∫ßn l·ªõn tr∆∞·ªùng h·ª£p
module.exports = {
    query: (text, params) => pool.query(text, params),

    // N·∫øu sau n√†y c·∫ßn d√πng transaction, b·∫°n c√≥ th·ªÉ export th√™m:
    getClient: () => pool.connect(), // ƒë·ªÉ d√πng v·ªõi BEGIN/COMMIT
    end: () => pool.end(), // ƒë·ªÉ ƒë√≥ng pool khi t·∫Øt server

    // H√†m helper: t·ª± ƒë·ªông qu·∫£n l√Ω k·∫øt n·ªëi v√† release
    transaction: async (callback) => {
        const client = await pool.connect();
        try {
            await client.query("BEGIN");
            const result = await callback(client);
            await client.query("COMMIT");
            return result;
        } catch (err) {
            await client.query("ROLLBACK");
            throw err;
        } finally {
            client.release(); // ‚úÖ ƒê·∫£m b·∫£o lu√¥n release
        }
    },
};
